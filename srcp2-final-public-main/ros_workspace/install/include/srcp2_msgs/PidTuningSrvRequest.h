// Generated by gencpp from file srcp2_msgs/PidTuningSrvRequest.msg
// DO NOT EDIT!


#ifndef SRCP2_MSGS_MESSAGE_PIDTUNINGSRVREQUEST_H
#define SRCP2_MSGS_MESSAGE_PIDTUNINGSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace srcp2_msgs
{
template <class ContainerAllocator>
struct PidTuningSrvRequest_
{
  typedef PidTuningSrvRequest_<ContainerAllocator> Type;

  PidTuningSrvRequest_()
    : joint()
    , Kp(0.0)
    , Ki(0.0)
    , Kd(0.0)  {
    }
  PidTuningSrvRequest_(const ContainerAllocator& _alloc)
    : joint(_alloc)
    , Kp(0.0)
    , Ki(0.0)
    , Kd(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_type;
  _joint_type joint;

   typedef double _Kp_type;
  _Kp_type Kp;

   typedef double _Ki_type;
  _Ki_type Ki;

   typedef double _Kd_type;
  _Kd_type Kd;





  typedef boost::shared_ptr< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PidTuningSrvRequest_

typedef ::srcp2_msgs::PidTuningSrvRequest_<std::allocator<void> > PidTuningSrvRequest;

typedef boost::shared_ptr< ::srcp2_msgs::PidTuningSrvRequest > PidTuningSrvRequestPtr;
typedef boost::shared_ptr< ::srcp2_msgs::PidTuningSrvRequest const> PidTuningSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator1> & lhs, const ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint == rhs.joint &&
    lhs.Kp == rhs.Kp &&
    lhs.Ki == rhs.Ki &&
    lhs.Kd == rhs.Kd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator1> & lhs, const ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srcp2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf885f89b2a90026ef8d8e470808b2d5";
  }

  static const char* value(const ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf885f89b2a90026ULL;
  static const uint64_t static_value2 = 0xef8d8e470808b2d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srcp2_msgs/PidTuningSrvRequest";
  }

  static const char* value(const ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Space Robotics Simulation, Phase 2\n"
"# Copyright (c) 2020, NASA-JSC. All Rights Reserved\n"
"# Unauthorized copying or distribution of this code is strictly prohibited\n"
"#\n"
"string   joint    # name of joint\n"
"float64  Kp\n"
"float64  Ki\n"
"float64  Kd\n"
;
  }

  static const char* value(const ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint);
      stream.next(m.Kp);
      stream.next(m.Ki);
      stream.next(m.Kd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PidTuningSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srcp2_msgs::PidTuningSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint);
    s << indent << "Kp: ";
    Printer<double>::stream(s, indent + "  ", v.Kp);
    s << indent << "Ki: ";
    Printer<double>::stream(s, indent + "  ", v.Ki);
    s << indent << "Kd: ";
    Printer<double>::stream(s, indent + "  ", v.Kd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRCP2_MSGS_MESSAGE_PIDTUNINGSRVREQUEST_H
