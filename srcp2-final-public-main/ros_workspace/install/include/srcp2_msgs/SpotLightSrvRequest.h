// Generated by gencpp from file srcp2_msgs/SpotLightSrvRequest.msg
// DO NOT EDIT!


#ifndef SRCP2_MSGS_MESSAGE_SPOTLIGHTSRVREQUEST_H
#define SRCP2_MSGS_MESSAGE_SPOTLIGHTSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace srcp2_msgs
{
template <class ContainerAllocator>
struct SpotLightSrvRequest_
{
  typedef SpotLightSrvRequest_<ContainerAllocator> Type;

  SpotLightSrvRequest_()
    : range(0.0)  {
    }
  SpotLightSrvRequest_(const ContainerAllocator& _alloc)
    : range(0.0)  {
  (void)_alloc;
    }



   typedef double _range_type;
  _range_type range;





  typedef boost::shared_ptr< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SpotLightSrvRequest_

typedef ::srcp2_msgs::SpotLightSrvRequest_<std::allocator<void> > SpotLightSrvRequest;

typedef boost::shared_ptr< ::srcp2_msgs::SpotLightSrvRequest > SpotLightSrvRequestPtr;
typedef boost::shared_ptr< ::srcp2_msgs::SpotLightSrvRequest const> SpotLightSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator1> & lhs, const ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.range == rhs.range;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator1> & lhs, const ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srcp2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d601fea38a6f57aa64f6c83d7b98b71c";
  }

  static const char* value(const ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd601fea38a6f57aaULL;
  static const uint64_t static_value2 = 0x64f6c83d7b98b71cULL;
};

template<class ContainerAllocator>
struct DataType< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srcp2_msgs/SpotLightSrvRequest";
  }

  static const char* value(const ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Space Robotics Simulation, Phase 2\n"
"# Copyright (c) 2019, NASA-JSC. All Rights Reserved\n"
"# Unauthorized copying or distribution of this code is strictly prohibited\n"
"#\n"
"#\n"
"# Robot spot-light control\n"
"#\n"
"float64 range\n"
;
  }

  static const char* value(const ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpotLightSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srcp2_msgs::SpotLightSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "range: ";
    Printer<double>::stream(s, indent + "  ", v.range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRCP2_MSGS_MESSAGE_SPOTLIGHTSRVREQUEST_H
