// Generated by gencpp from file srcp2_msgs/SystemMonitorMsg.msg
// DO NOT EDIT!


#ifndef SRCP2_MSGS_MESSAGE_SYSTEMMONITORMSG_H
#define SRCP2_MSGS_MESSAGE_SYSTEMMONITORMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace srcp2_msgs
{
template <class ContainerAllocator>
struct SystemMonitorMsg_
{
  typedef SystemMonitorMsg_<ContainerAllocator> Type;

  SystemMonitorMsg_()
    : header()
    , power_health(0)
    , power_saver(false)
    , solar_ok(false)
    , power_demand(false)
    , battery_mode(0)
    , power_level(0.0)
    , power_rate(0.0)  {
    }
  SystemMonitorMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , power_health(0)
    , power_saver(false)
    , solar_ok(false)
    , power_demand(false)
    , battery_mode(0)
    , power_level(0.0)
    , power_rate(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _power_health_type;
  _power_health_type power_health;

   typedef uint8_t _power_saver_type;
  _power_saver_type power_saver;

   typedef uint8_t _solar_ok_type;
  _solar_ok_type solar_ok;

   typedef uint8_t _power_demand_type;
  _power_demand_type power_demand;

   typedef int8_t _battery_mode_type;
  _battery_mode_type battery_mode;

   typedef float _power_level_type;
  _power_level_type power_level;

   typedef float _power_rate_type;
  _power_rate_type power_rate;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(POWER_HEALTH_OK)
  #undef POWER_HEALTH_OK
#endif
#if defined(_WIN32) && defined(POWER_HEALTH_LOW)
  #undef POWER_HEALTH_LOW
#endif
#if defined(_WIN32) && defined(POWER_HEALTH_EMERGENCY)
  #undef POWER_HEALTH_EMERGENCY
#endif
#if defined(_WIN32) && defined(BATTERY_MODE_NO_CHANGE)
  #undef BATTERY_MODE_NO_CHANGE
#endif
#if defined(_WIN32) && defined(BATTERY_MODE_CHARGE_HIGH)
  #undef BATTERY_MODE_CHARGE_HIGH
#endif
#if defined(_WIN32) && defined(BATTERY_MODE_CHARGE_NORMAL)
  #undef BATTERY_MODE_CHARGE_NORMAL
#endif
#if defined(_WIN32) && defined(BATTERY_MODE_CHARGE_SLOW)
  #undef BATTERY_MODE_CHARGE_SLOW
#endif
#if defined(_WIN32) && defined(BATTERY_MODE_DISCHARGE_HIGH)
  #undef BATTERY_MODE_DISCHARGE_HIGH
#endif
#if defined(_WIN32) && defined(BATTERY_MODE_DISCHARGE_NORMAL)
  #undef BATTERY_MODE_DISCHARGE_NORMAL
#endif
#if defined(_WIN32) && defined(BATTERY_MODE_DISCHARGE_SLOW)
  #undef BATTERY_MODE_DISCHARGE_SLOW
#endif
#if defined(_WIN32) && defined(BATTERY_MODE_DISCHARGE_CONSERVE)
  #undef BATTERY_MODE_DISCHARGE_CONSERVE
#endif
#if defined(_WIN32) && defined(BATTERY_MODE_FAST_REPAIR)
  #undef BATTERY_MODE_FAST_REPAIR
#endif

  enum {
    POWER_HEALTH_OK = 0u,
    POWER_HEALTH_LOW = 1u,
    POWER_HEALTH_EMERGENCY = 2u,
    BATTERY_MODE_NO_CHANGE = 0u,
    BATTERY_MODE_CHARGE_HIGH = 1u,
    BATTERY_MODE_CHARGE_NORMAL = 2u,
    BATTERY_MODE_CHARGE_SLOW = 3u,
    BATTERY_MODE_DISCHARGE_HIGH = 4u,
    BATTERY_MODE_DISCHARGE_NORMAL = 5u,
    BATTERY_MODE_DISCHARGE_SLOW = 6u,
    BATTERY_MODE_DISCHARGE_CONSERVE = 7u,
    BATTERY_MODE_FAST_REPAIR = 8u,
  };


  typedef boost::shared_ptr< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SystemMonitorMsg_

typedef ::srcp2_msgs::SystemMonitorMsg_<std::allocator<void> > SystemMonitorMsg;

typedef boost::shared_ptr< ::srcp2_msgs::SystemMonitorMsg > SystemMonitorMsgPtr;
typedef boost::shared_ptr< ::srcp2_msgs::SystemMonitorMsg const> SystemMonitorMsgConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator1> & lhs, const ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.power_health == rhs.power_health &&
    lhs.power_saver == rhs.power_saver &&
    lhs.solar_ok == rhs.solar_ok &&
    lhs.power_demand == rhs.power_demand &&
    lhs.battery_mode == rhs.battery_mode &&
    lhs.power_level == rhs.power_level &&
    lhs.power_rate == rhs.power_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator1> & lhs, const ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srcp2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0899aee3520463f46dd413ba6fef2b62";
  }

  static const char* value(const ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0899aee3520463f4ULL;
  static const uint64_t static_value2 = 0x6dd413ba6fef2b62ULL;
};

template<class ContainerAllocator>
struct DataType< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srcp2_msgs/SystemMonitorMsg";
  }

  static const char* value(const ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Space Robotics Simulation, Phase 2\n"
"# Copyright (c) 2019, NASA-JSC. All Rights Reserved\n"
"# Unauthorized copying or distribution of this code is strictly prohibited\n"
"#\n"
"# \n"
"# This message allows battery of a robot to communicate how much power is left\n"
"#\n"
"\n"
"# Power State Constants\n"
"uint8 POWER_HEALTH_OK        = 0\n"
"uint8 POWER_HEALTH_LOW       = 1\n"
"uint8 POWER_HEALTH_EMERGENCY = 2\n"
"\n"
"# Battery Mode Constants\n"
"uint8 BATTERY_MODE_NO_CHANGE       =0\n"
"uint8 BATTERY_MODE_CHARGE_HIGH     =1\n"
"uint8 BATTERY_MODE_CHARGE_NORMAL   =2\n"
"uint8 BATTERY_MODE_CHARGE_SLOW     =3\n"
"uint8 BATTERY_MODE_DISCHARGE_HIGH  =4\n"
"uint8 BATTERY_MODE_DISCHARGE_NORMAL=5\n"
"uint8 BATTERY_MODE_DISCHARGE_SLOW  =6\n"
"uint8 BATTERY_MODE_DISCHARGE_CONSERVE  =7\n"
"uint8 BATTERY_MODE_FAST_REPAIR     =8\n"
"\n"
"\n"
"#*************** The message **************\n"
"Header  header\n"
"\n"
"int8    power_health    #\n"
"bool    power_saver     #\n"
"bool    solar_ok        #\n"
"bool    power_demand    #\n"
"int8    battery_mode    #\n"
"float32 power_level     #\n"
"float32 power_rate      #\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.power_health);
      stream.next(m.power_saver);
      stream.next(m.solar_ok);
      stream.next(m.power_demand);
      stream.next(m.battery_mode);
      stream.next(m.power_level);
      stream.next(m.power_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SystemMonitorMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srcp2_msgs::SystemMonitorMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "power_health: ";
    Printer<int8_t>::stream(s, indent + "  ", v.power_health);
    s << indent << "power_saver: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_saver);
    s << indent << "solar_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.solar_ok);
    s << indent << "power_demand: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_demand);
    s << indent << "battery_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.battery_mode);
    s << indent << "power_level: ";
    Printer<float>::stream(s, indent + "  ", v.power_level);
    s << indent << "power_rate: ";
    Printer<float>::stream(s, indent + "  ", v.power_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRCP2_MSGS_MESSAGE_SYSTEMMONITORMSG_H
