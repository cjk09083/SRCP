// Generated by gencpp from file srcp2_msgs/ScoreMsg.msg
// DO NOT EDIT!


#ifndef SRCP2_MSGS_MESSAGE_SCOREMSG_H
#define SRCP2_MSGS_MESSAGE_SCOREMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace srcp2_msgs
{
template <class ContainerAllocator>
struct ScoreMsg_
{
  typedef ScoreMsg_<ContainerAllocator> Type;

  ScoreMsg_()
    : header()
    , score(0.0)
    , hauler_volatile_score(0.0)
    , types_collected()
    , masses_collected_kg()  {
    }
  ScoreMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , score(0.0)
    , hauler_volatile_score(0.0)
    , types_collected(_alloc)
    , masses_collected_kg(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _score_type;
  _score_type score;

   typedef double _hauler_volatile_score_type;
  _hauler_volatile_score_type hauler_volatile_score;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _types_collected_type;
  _types_collected_type types_collected;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _masses_collected_kg_type;
  _masses_collected_kg_type masses_collected_kg;





  typedef boost::shared_ptr< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ScoreMsg_

typedef ::srcp2_msgs::ScoreMsg_<std::allocator<void> > ScoreMsg;

typedef boost::shared_ptr< ::srcp2_msgs::ScoreMsg > ScoreMsgPtr;
typedef boost::shared_ptr< ::srcp2_msgs::ScoreMsg const> ScoreMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srcp2_msgs::ScoreMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srcp2_msgs::ScoreMsg_<ContainerAllocator1> & lhs, const ::srcp2_msgs::ScoreMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.score == rhs.score &&
    lhs.hauler_volatile_score == rhs.hauler_volatile_score &&
    lhs.types_collected == rhs.types_collected &&
    lhs.masses_collected_kg == rhs.masses_collected_kg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srcp2_msgs::ScoreMsg_<ContainerAllocator1> & lhs, const ::srcp2_msgs::ScoreMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srcp2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d717730154f875f7091c54cda3c9ac8e";
  }

  static const char* value(const ::srcp2_msgs::ScoreMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd717730154f875f7ULL;
  static const uint64_t static_value2 = 0x091c54cda3c9ac8eULL;
};

template<class ContainerAllocator>
struct DataType< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srcp2_msgs/ScoreMsg";
  }

  static const char* value(const ::srcp2_msgs::ScoreMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Space Robotics Simulation, Phase 2\n"
"# Copyright (c) 2021, NASA-JSC. All Rights Reserved\n"
"# Unauthorized copying or distribution of this code is strictly prohibited\n"
"#\n"
"# \n"
"# This message publishes the current score, and volatile collection state\n"
"# for this simulation\n"
"#\n"
"Header header\n"
"\n"
"# scoring data\n"
"float64 score # the current total score for this sim\n"
"float64 hauler_volatile_score # the score of all the volatiles currently held in hauler bins (tie-breaker #1)\n"
"\n"
"# collection data (indexes align) -- this is for competitor information and used in tie-breaking\n"
"string[] types_collected      # which types have been collected to date?\n"
"float64[] masses_collected_kg # how much each type?\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::srcp2_msgs::ScoreMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.score);
      stream.next(m.hauler_volatile_score);
      stream.next(m.types_collected);
      stream.next(m.masses_collected_kg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScoreMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srcp2_msgs::ScoreMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srcp2_msgs::ScoreMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "hauler_volatile_score: ";
    Printer<double>::stream(s, indent + "  ", v.hauler_volatile_score);
    s << indent << "types_collected[]" << std::endl;
    for (size_t i = 0; i < v.types_collected.size(); ++i)
    {
      s << indent << "  types_collected[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.types_collected[i]);
    }
    s << indent << "masses_collected_kg[]" << std::endl;
    for (size_t i = 0; i < v.masses_collected_kg.size(); ++i)
    {
      s << indent << "  masses_collected_kg[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.masses_collected_kg[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRCP2_MSGS_MESSAGE_SCOREMSG_H
