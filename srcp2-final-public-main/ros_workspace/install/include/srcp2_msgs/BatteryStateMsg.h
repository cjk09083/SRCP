// Generated by gencpp from file srcp2_msgs/BatteryStateMsg.msg
// DO NOT EDIT!


#ifndef SRCP2_MSGS_MESSAGE_BATTERYSTATEMSG_H
#define SRCP2_MSGS_MESSAGE_BATTERYSTATEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace srcp2_msgs
{
template <class ContainerAllocator>
struct BatteryStateMsg_
{
  typedef BatteryStateMsg_<ContainerAllocator> Type;

  BatteryStateMsg_()
    : header()
    , max_capacity_watt_hours(0.0)
    , max_discharge_rate_watts(0.0)
    , current_capacity_watt_hours(0.0)
    , current_consumption_watts(0.0)
    , safe_mode_avail_frac(0.0)
    , safe_mode_percent(0.0)
    , shutdown_percent(0.0)
    , mode(0)
    , overload(0)
    , number_of_connections(0)  {
    }
  BatteryStateMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , max_capacity_watt_hours(0.0)
    , max_discharge_rate_watts(0.0)
    , current_capacity_watt_hours(0.0)
    , current_consumption_watts(0.0)
    , safe_mode_avail_frac(0.0)
    , safe_mode_percent(0.0)
    , shutdown_percent(0.0)
    , mode(0)
    , overload(0)
    , number_of_connections(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _max_capacity_watt_hours_type;
  _max_capacity_watt_hours_type max_capacity_watt_hours;

   typedef float _max_discharge_rate_watts_type;
  _max_discharge_rate_watts_type max_discharge_rate_watts;

   typedef float _current_capacity_watt_hours_type;
  _current_capacity_watt_hours_type current_capacity_watt_hours;

   typedef float _current_consumption_watts_type;
  _current_consumption_watts_type current_consumption_watts;

   typedef float _safe_mode_avail_frac_type;
  _safe_mode_avail_frac_type safe_mode_avail_frac;

   typedef float _safe_mode_percent_type;
  _safe_mode_percent_type safe_mode_percent;

   typedef float _shutdown_percent_type;
  _shutdown_percent_type shutdown_percent;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef int32_t _overload_type;
  _overload_type overload;

   typedef int32_t _number_of_connections_type;
  _number_of_connections_type number_of_connections;





  typedef boost::shared_ptr< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryStateMsg_

typedef ::srcp2_msgs::BatteryStateMsg_<std::allocator<void> > BatteryStateMsg;

typedef boost::shared_ptr< ::srcp2_msgs::BatteryStateMsg > BatteryStateMsgPtr;
typedef boost::shared_ptr< ::srcp2_msgs::BatteryStateMsg const> BatteryStateMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator1> & lhs, const ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.max_capacity_watt_hours == rhs.max_capacity_watt_hours &&
    lhs.max_discharge_rate_watts == rhs.max_discharge_rate_watts &&
    lhs.current_capacity_watt_hours == rhs.current_capacity_watt_hours &&
    lhs.current_consumption_watts == rhs.current_consumption_watts &&
    lhs.safe_mode_avail_frac == rhs.safe_mode_avail_frac &&
    lhs.safe_mode_percent == rhs.safe_mode_percent &&
    lhs.shutdown_percent == rhs.shutdown_percent &&
    lhs.mode == rhs.mode &&
    lhs.overload == rhs.overload &&
    lhs.number_of_connections == rhs.number_of_connections;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator1> & lhs, const ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srcp2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d06a9dfb08ec8e2eec28de188121f4b";
  }

  static const char* value(const ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d06a9dfb08ec8e2ULL;
  static const uint64_t static_value2 = 0xeec28de188121f4bULL;
};

template<class ContainerAllocator>
struct DataType< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srcp2_msgs/BatteryStateMsg";
  }

  static const char* value(const ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Space Robotics Simulation, Phase 2\n"
"# Copyright (c) 2019, NASA-JSC. All Rights Reserved\n"
"# Unauthorized copying or distribution of this code is strictly prohibited\n"
"#\n"
"# \n"
"# This message allows battery of a robot to communicate how much power is left\n"
"#\n"
"\n"
"Header  header\n"
"\n"
"float32 max_capacity_watt_hours         # maximum capacity of the battery\n"
"float32 max_discharge_rate_watts        # maximum total number of instantaneous watts available\n"
"float32 current_capacity_watt_hours     # current capacity of the battery\n"
"float32 current_consumption_watts       # current power consumption in watts\n"
"float32 safe_mode_avail_frac            # fraction of power available in safe mode\n"
"float32 safe_mode_percent               # power level at which rover functionality is limited\n"
"float32 shutdown_percent                # power level at which rover functionality is halted\n"
"int32 mode                              # mode of the battery, 0 = fully_operation, 1 = power_saving_mode, 2 = emergency_shutdown\n"
"int32 overload                          # 0 = no overload, 1 = overload\n"
"int32 number_of_connections             # number of consumers\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.max_capacity_watt_hours);
      stream.next(m.max_discharge_rate_watts);
      stream.next(m.current_capacity_watt_hours);
      stream.next(m.current_consumption_watts);
      stream.next(m.safe_mode_avail_frac);
      stream.next(m.safe_mode_percent);
      stream.next(m.shutdown_percent);
      stream.next(m.mode);
      stream.next(m.overload);
      stream.next(m.number_of_connections);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryStateMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srcp2_msgs::BatteryStateMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "max_capacity_watt_hours: ";
    Printer<float>::stream(s, indent + "  ", v.max_capacity_watt_hours);
    s << indent << "max_discharge_rate_watts: ";
    Printer<float>::stream(s, indent + "  ", v.max_discharge_rate_watts);
    s << indent << "current_capacity_watt_hours: ";
    Printer<float>::stream(s, indent + "  ", v.current_capacity_watt_hours);
    s << indent << "current_consumption_watts: ";
    Printer<float>::stream(s, indent + "  ", v.current_consumption_watts);
    s << indent << "safe_mode_avail_frac: ";
    Printer<float>::stream(s, indent + "  ", v.safe_mode_avail_frac);
    s << indent << "safe_mode_percent: ";
    Printer<float>::stream(s, indent + "  ", v.safe_mode_percent);
    s << indent << "shutdown_percent: ";
    Printer<float>::stream(s, indent + "  ", v.shutdown_percent);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "overload: ";
    Printer<int32_t>::stream(s, indent + "  ", v.overload);
    s << indent << "number_of_connections: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_of_connections);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRCP2_MSGS_MESSAGE_BATTERYSTATEMSG_H
