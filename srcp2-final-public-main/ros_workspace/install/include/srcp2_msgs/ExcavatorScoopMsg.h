// Generated by gencpp from file srcp2_msgs/ExcavatorScoopMsg.msg
// DO NOT EDIT!


#ifndef SRCP2_MSGS_MESSAGE_EXCAVATORSCOOPMSG_H
#define SRCP2_MSGS_MESSAGE_EXCAVATORSCOOPMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace srcp2_msgs
{
template <class ContainerAllocator>
struct ExcavatorScoopMsg_
{
  typedef ExcavatorScoopMsg_<ContainerAllocator> Type;

  ExcavatorScoopMsg_()
    : header()
    , volatile_clod_mass(false)
    , regolith_clod_mass(false)  {
    }
  ExcavatorScoopMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , volatile_clod_mass(false)
    , regolith_clod_mass(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _volatile_clod_mass_type;
  _volatile_clod_mass_type volatile_clod_mass;

   typedef uint8_t _regolith_clod_mass_type;
  _regolith_clod_mass_type regolith_clod_mass;





  typedef boost::shared_ptr< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ExcavatorScoopMsg_

typedef ::srcp2_msgs::ExcavatorScoopMsg_<std::allocator<void> > ExcavatorScoopMsg;

typedef boost::shared_ptr< ::srcp2_msgs::ExcavatorScoopMsg > ExcavatorScoopMsgPtr;
typedef boost::shared_ptr< ::srcp2_msgs::ExcavatorScoopMsg const> ExcavatorScoopMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator1> & lhs, const ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.volatile_clod_mass == rhs.volatile_clod_mass &&
    lhs.regolith_clod_mass == rhs.regolith_clod_mass;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator1> & lhs, const ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srcp2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "218c9d9ac34cff7d7bc66c14b96e45df";
  }

  static const char* value(const ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x218c9d9ac34cff7dULL;
  static const uint64_t static_value2 = 0x7bc66c14b96e45dfULL;
};

template<class ContainerAllocator>
struct DataType< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srcp2_msgs/ExcavatorScoopMsg";
  }

  static const char* value(const ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Space Robotics Simulation, Phase 2\n"
"# Copyright (c) 2021, NASA-JSC. All Rights Reserved\n"
"# Unauthorized copying or distribution of this code is strictly prohibited\n"
"#\n"
"# \n"
"# This message publishes the current score, and volatile collection state\n"
"# for this simulation\n"
"#\n"
"Header header\n"
"\n"
"# scoop data\n"
"bool volatile_clod_mass # is volatile mass in scoop\n"
"bool regolith_clod_mass # is regolith mass in scoop\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.volatile_clod_mass);
      stream.next(m.regolith_clod_mass);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExcavatorScoopMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srcp2_msgs::ExcavatorScoopMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "volatile_clod_mass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.volatile_clod_mass);
    s << indent << "regolith_clod_mass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.regolith_clod_mass);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRCP2_MSGS_MESSAGE_EXCAVATORSCOOPMSG_H
