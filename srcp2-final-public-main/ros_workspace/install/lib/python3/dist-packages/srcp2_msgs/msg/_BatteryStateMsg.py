# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from srcp2_msgs/BatteryStateMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class BatteryStateMsg(genpy.Message):
  _md5sum = "6d06a9dfb08ec8e2eec28de188121f4b"
  _type = "srcp2_msgs/BatteryStateMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#
# Space Robotics Simulation, Phase 2
# Copyright (c) 2019, NASA-JSC. All Rights Reserved
# Unauthorized copying or distribution of this code is strictly prohibited
#
# 
# This message allows battery of a robot to communicate how much power is left
#

Header  header

float32 max_capacity_watt_hours         # maximum capacity of the battery
float32 max_discharge_rate_watts        # maximum total number of instantaneous watts available
float32 current_capacity_watt_hours     # current capacity of the battery
float32 current_consumption_watts       # current power consumption in watts
float32 safe_mode_avail_frac            # fraction of power available in safe mode
float32 safe_mode_percent               # power level at which rover functionality is limited
float32 shutdown_percent                # power level at which rover functionality is halted
int32 mode                              # mode of the battery, 0 = fully_operation, 1 = power_saving_mode, 2 = emergency_shutdown
int32 overload                          # 0 = no overload, 1 = overload
int32 number_of_connections             # number of consumers

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','max_capacity_watt_hours','max_discharge_rate_watts','current_capacity_watt_hours','current_consumption_watts','safe_mode_avail_frac','safe_mode_percent','shutdown_percent','mode','overload','number_of_connections']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,max_capacity_watt_hours,max_discharge_rate_watts,current_capacity_watt_hours,current_consumption_watts,safe_mode_avail_frac,safe_mode_percent,shutdown_percent,mode,overload,number_of_connections

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BatteryStateMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.max_capacity_watt_hours is None:
        self.max_capacity_watt_hours = 0.
      if self.max_discharge_rate_watts is None:
        self.max_discharge_rate_watts = 0.
      if self.current_capacity_watt_hours is None:
        self.current_capacity_watt_hours = 0.
      if self.current_consumption_watts is None:
        self.current_consumption_watts = 0.
      if self.safe_mode_avail_frac is None:
        self.safe_mode_avail_frac = 0.
      if self.safe_mode_percent is None:
        self.safe_mode_percent = 0.
      if self.shutdown_percent is None:
        self.shutdown_percent = 0.
      if self.mode is None:
        self.mode = 0
      if self.overload is None:
        self.overload = 0
      if self.number_of_connections is None:
        self.number_of_connections = 0
    else:
      self.header = std_msgs.msg.Header()
      self.max_capacity_watt_hours = 0.
      self.max_discharge_rate_watts = 0.
      self.current_capacity_watt_hours = 0.
      self.current_consumption_watts = 0.
      self.safe_mode_avail_frac = 0.
      self.safe_mode_percent = 0.
      self.shutdown_percent = 0.
      self.mode = 0
      self.overload = 0
      self.number_of_connections = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7f3i().pack(_x.max_capacity_watt_hours, _x.max_discharge_rate_watts, _x.current_capacity_watt_hours, _x.current_consumption_watts, _x.safe_mode_avail_frac, _x.safe_mode_percent, _x.shutdown_percent, _x.mode, _x.overload, _x.number_of_connections))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.max_capacity_watt_hours, _x.max_discharge_rate_watts, _x.current_capacity_watt_hours, _x.current_consumption_watts, _x.safe_mode_avail_frac, _x.safe_mode_percent, _x.shutdown_percent, _x.mode, _x.overload, _x.number_of_connections,) = _get_struct_7f3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7f3i().pack(_x.max_capacity_watt_hours, _x.max_discharge_rate_watts, _x.current_capacity_watt_hours, _x.current_consumption_watts, _x.safe_mode_avail_frac, _x.safe_mode_percent, _x.shutdown_percent, _x.mode, _x.overload, _x.number_of_connections))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.max_capacity_watt_hours, _x.max_discharge_rate_watts, _x.current_capacity_watt_hours, _x.current_consumption_watts, _x.safe_mode_avail_frac, _x.safe_mode_percent, _x.shutdown_percent, _x.mode, _x.overload, _x.number_of_connections,) = _get_struct_7f3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7f3i = None
def _get_struct_7f3i():
    global _struct_7f3i
    if _struct_7f3i is None:
        _struct_7f3i = struct.Struct("<7f3i")
    return _struct_7f3i
